第一章 开始：

	1、C++的标准库里定义了4个IO对象：
		cin --  标准输入
		cout -- 标准输出
		cerr -- 标准错误，用于输出警告和错误消息
		clog -- 用于输出程序运行时的一般性信息

	2、输出运算符(<<)：
		<<运算符接受两个运算对象，左侧的的对象必须是一个ostream对象，右侧的运算对象是要打印的值，此运算符将给定的值写到给定的ostream对象中

	3、std::cout
		使用命名空间std中的cout，（::是作用域运算符）

	4、注释界定符不能嵌套：
		/*
		 *	注释对/* */不能嵌套
		 *	“不能嵌套”几个字会被认为是源码，像剩余程序一样处理
		 */

	5、读取数量不定的输入数据：
		while(cin >> value)		//这个语句的实际效果是在检测cin，即在检测流的状态

	6、类机制是C++最重要的特性之一

	7、包含来自标准库的头文件时，用尖括号(如 <iostream>)包围头文件；不属于标准库的头文件，则用双引号(如 "Ninaye.h")包围

	8、使用文件重定向：
		$ 是操作系统提示符
		a 是cpp文件编译后获得的文件a.exe的名称
		infile 是输入文件
		outfile 是输出文件
		$ a <infile				-- 将输入流重定向到infile，即将infile文件代替输入数据
		$ a >outfile			-- 将输出流重定向到outfile,即将输出内容输出到outfile文件里
		$ a <infile >outfile	-- 首先将infile里的文件写入到程序，再将输出的结果输出到outfile文件里
	
	9、缓冲区的作用：
		缓冲区的目的就是减少刷屏的次数
		比如，你的程序输出圣经中的一篇文章。不带缓冲的话，就会每写一个字母，就输出一个字母，然后刷屏
		有了缓冲，你将看到若干句子“同时”就出现在了屏幕上（由内存翻新到显存，然后刷新屏幕）
	
	10、术语表：
		缓冲区(buffer):
			读写缓冲区的动作与程序中的动作是无关的
			我们可以显式的刷新输出缓冲
			默认情况下，读cin会刷新cout，程序非正常终止也会刷新cout
		
		cerr:
			一个ostream对象，关联到标准错误，通常写入到与标准输出相同的设备
			默认情况下写到cerr的数据是不缓冲的
			cerr通常用于输出错误信息或其他不属于程序正常逻辑的输出内容
			cerr不能和cout一样重定向
			
			1、cout与cerr的区别在于:
				cerr不经过缓冲区,直接向显示器输出信息,而cout中的信息存放在缓冲区,缓冲区满或者遇到endl时才输出
			2、为什么有cerr和cout:
				比如，你的程序遇到调用栈用完了的威胁（无限，没有出口的递归）
				你说，你到什么地方借内存，存放你的错误信息？
				所以有了cerr。其目的，就是在你最需要它的紧急情况下，还能得到输出功能的支持
				
		/*
		 *	clog：
		 *		问了老师，母鸡啊现在
		 */
		
		类：
			一种用于定义自己的数据结构及其相关操作的机制，是C++中最基本的特性之一
			
		类类型：
			类定义的类型
			类名及为类型名
		
		表达式：
			最小的计算单元，一个表达式包含一个或者多个运算对象，通常还包含一个或者多个运算符
		
		头文件：
			使类或其他名字的定义可被多个程序使用的一种机制，程序通过#include指令使用头文件
		
		命名空间：
			将库定义的名字放在一个单一的位置的机制。命名空间可以帮助避免不经意的名字冲突
			C++标准库定义的名字在命名空间std中
			C++中可以同时using 两个命名空间，但前提是这两个空间中没有相同的变量或函数，否则会提示 "ambiguous symbol"的错误信息
		
		标准库：
			一个类型和函数的集合，每个C++编译器必须支持
			标准库提供了支持IO操作的类型
			iostream库其实表示的是标准库中定义的IO类的部分
		
		::运算符：
			作用域运算符，其作用之一就是访问命名空间中的名字
			例如std::cout表示命名空间std中的名字cout

